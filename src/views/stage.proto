syntax = "proto3";

package stage.v1;

// A description of a single fixture. To promote flexibility, this is given as
// raw DMX channels. The interface needs to know what each light is and what
// IDs map to what lights ahead of time.
message Fixture {
  // The ID number of the fixture.
  int32 id = 1;
  // The value of each DMX channel associated with the fixture.
  bytes channels = 2;
}

// A description of the whole stage.
message Stage {
  repeated uint32 fixtures = 1;
}

// A description of a scene.
message Scene {
  // The name of the scene.
  string name = 1;
  // The UUID of the scene.
  int32 id = 2;
  // If the scene is external or a normal scene. External scenes are driven
  // by external inputs and cannot be controlled by the interface.
  bool external = 3;
  // The state state of the stage.
  optional Stage stage = 4;
}

// Stage control service for the control interface.
service ControlService {
  // Get a list of the UUIDs for all scenes.
  rpc GetSceneList(GetSceneListRequest) returns (GetSceneListResponse);
  // Get the description of a scene given its UUID.
  rpc GetScene(GetSceneRequest) returns (GetSceneResponse);
  // Change a scene. Returns the new state of the scene. Calling this on
  // external scenes throws an error.
  rpc SetScene(SetSceneRequest) returns (SetSceneResponse);
  // Get the UUID of the current scene.
  rpc GetCurrentScene(GetCurrentSceneRequest) returns (GetCurrentSceneResponse);
  // Change the current scene. Returns the number of frames the transition
  // will take.
  rpc SetCurrentScene(SetCurrentSceneRequest) returns (SetCurrentSceneResponse);
  // Get the current state of all lights on the stage. This is the actual
  // state of the stage, so it may not match the scene state if scenes are
  // transitioning.
  rpc GetState(GetStateRequest) returns (GetStateResponse);
  // Set a fixture in a scene. Returns the new state of the fixture. Requests
  // with the wrong number of channels or for external scenes throw and error.
  rpc SetFixture(SetFixtureRequest) returns (SetFixtureResponse);
  // Add a new scene. Returns the new state of the scene.
  rpc CreateScene(CreateSceneRequest) returns (CreateSceneResponse);
  // Delete a scene. Returns the deleted scene ID.
  rpc DeleteScene(DeleteSceneRequest) returns (DeleteSceneResponse);
  // Add a new fixture. Returns the new state of the fixture.
  rpc CreateFixture(CreateFixtureRequest) returns (CreateFixtureResponse);
  // Delete a fixture. Returns the deleted fixture ID.
  rpc DeleteFixture(DeleteFixtureRequest) returns (DeleteFixtureResponse);
  
  rpc UpdateCurrentScene(UpdateCurrentSceneRequest) returns (UpdateCurrentSceneResponse);
}

message AddFixturesToSceneRequest {
  uint32 sceneId = 1;
  repeated uint32 fixtureIds = 2;
}

message AddFixturesToSceneResponse {
}

message RemoveAllFixturesFromSceneRequest {
  uint32 sceneId = 1;
}

message RemoveAllFixturesFromSceneResponse {
}
// A request for the IDs of all scenes.
message GetSceneListRequest {}

// A response containing the IDs of all scenes.
message GetSceneListResponse {
  // A list of UUIDs.
  repeated Scene scenes = 1;
}

// A request for description of a scene.
message GetSceneRequest {
  // The UUID of the scene.
  string scene = 1;
}

// A response containing the scene description.
message GetSceneResponse {
  // The scene description.
  Scene scene = 1;
}

// A request to change a scene.
message SetSceneRequest {
  // The UUID of the scene.
  int32 uuid = 1;
  // The desired state of the scene.
  Scene scene = 2;
}

// A response of the changed scene.
message SetSceneResponse {
  // The new description of the scene
  Scene scene = 1;
}

// A request for the currently displayed scene.
message GetCurrentSceneRequest {}

// A response containing the currently displayed scene.
message GetCurrentSceneResponse {
  // The UUID of the scene.
  string scene = 1;
}

// A request to change currently displayed scene.
message SetCurrentSceneRequest {
  // The UUID of the new scene.
  string scene = 1;
}

// A response containing the changed scene.
message SetCurrentSceneResponse {
  // The UUID of the scene.
  string scene = 1;
  // The number of frames the transition will take.
  uint32 time = 2;
}

// A request for the current state of the stage.
message GetStateRequest {}

// A response containing the state of the stage.
message GetStateResponse {
  // The current state of the stage.
  Stage stage = 1;
}

// A request to change a fixture in a scene.
message SetFixtureRequest {
  // The UUID of the scene the fixture should be modified in.
  int32 scene = 1;
  // The desired state of the fixture.
  Fixture fixture = 2;
}

// A response containing the state of the stage.
message SetFixtureResponse {
  // The new description of the fixture.
  Fixture fixture = 1;
}

// A request to add a new scene.
message CreateSceneRequest {
  // The desired state of the scene.
  Scene scene = 1;
}

// A response containing the new scene.
message CreateSceneResponse {
  // The new description of the scene.
  Scene scene = 1;
}

// A request to delete a scene.
message DeleteSceneRequest {
  // The UUID of the scene to delete.
  int32 uuid = 1;
}

// A response containing the deleted scene ID.
message DeleteSceneResponse {
  // The UUID of the deleted scene.
  int32 uuid = 1;
}

// A request to add a new fixture.
message CreateFixtureRequest {
  // The desired state of the fixture.
  Fixture fixture = 1;
}

// A response containing the new fixture.
message CreateFixtureResponse {
  // The new description of the fixture.
  Fixture fixture = 1;
}

// A request to delete a fixture.
message DeleteFixtureRequest {
  // The ID of the fixture to delete.
  int32 id = 1;
}

// A response containing the deleted fixture ID.
message DeleteFixtureResponse {
  // The ID of the deleted fixture.
  int32 id = 1;
}

message UpdateCurrentSceneRequest {
  string newSceneId = 1;
}

message UpdateCurrentSceneResponse {
  Scene scene = 1;
}
// The type of an RPC message being sent.
enum RpcType {
  // An unfinished message. Messages of this type throw an error.
  RPC_TYPE_UNSPECIFIED = 0;
  // A request sent by the client.
  RPC_TYPE_REQUEST = 1;
  // A response sent by the server.
  RPC_TYPE_RESPONSE = 2;
  // A response sent by the server for failed request.
  RPC_TYPE_RESPONSE_ERROR = 3;
  // Sent by the client when disconnecting.
  RPC_TYPE_DISCONNECT = 4;
}

// Underlying RPC format that is actually sent over the socket.
message RpcMessage {
  // The type of the RPC message being sent.
  RpcType type = 1;
  // An unsigned integer representing which request a response is associated
  // with. These should be generated sequentially to minimize the chance of a
  // collision.
  optional uint32 id = 2;
  // The name of the RPC function the message is associated with.
  optional string method = 3;
  // Protobuf-encoded message of the appropriate type for the method, or UTF-8
  // encoded error text in the case of an error.
  optional bytes body = 4;
}